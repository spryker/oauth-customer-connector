[
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Business/Installer/OauthCustomerScopeInstaller.php",
        "description": "Prefix `is` must not be used with postfix `Exist`. Method: Spryker\\Zed\\OauthCustomerConnector\\Business\\Installer\\OauthCustomerScopeInstaller::isOauthScopeExist().",
        "rule": "ExistsPostfixRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Business/Installer/OauthCustomerScopeInstaller.php",
        "description": "Postfix `Exists` must be used instead of `Exist`. Method: Spryker\\Zed\\OauthCustomerConnector\\Business\\Installer\\OauthCustomerScopeInstaller::isOauthScopeExist().",
        "rule": "ExistsPostfixRule",
        "ruleset": "Spryker",
        "priority": "1"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToCustomerFacadeBridge.php",
        "description": "Bridges: Method `getCustomer()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToCustomerFacadeBridge.php",
        "description": "Bridges: Method `getCustomerByCriteria()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToOauthFacadeBridge.php",
        "description": "Bridges: Method `saveScope()` must have `public function [update|create]<DomainEntity>Collection(<DomainEntity>CollectionRequestTransfer): <DomainEntity>CollectionResponseTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToOauthFacadeBridge.php",
        "description": "Bridges: Method `saveClient()` must have `public function [update|create]<DomainEntity>Collection(<DomainEntity>CollectionRequestTransfer): <DomainEntity>CollectionResponseTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToOauthFacadeBridge.php",
        "description": "Bridges: Method `findScopeByIdentifier()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToOauthFacadeBridge.php",
        "description": "Bridges: Method `findClientByIdentifier()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Facade/OauthCustomerConnectorToOauthFacadeBridge.php",
        "description": "Bridges: Method `getScopesByIdentifiers()` must have `public function get<DomainEntity>Collection(<DomainEntity>CriteriaTransfer): <DomainEntity>CollectionTransfer` signature.",
        "rule": "BridgeFacadeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Service/OauthCustomerConnectorToUtilEncodingServiceBridge.php",
        "description": "Bridges: Type should be defined for param `value` in method `Spryker\\Zed\\OauthCustomerConnector\\Dependency\\Service\\OauthCustomerConnectorToUtilEncodingServiceBridge::encodeJson()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Service/OauthCustomerConnectorToUtilEncodingServiceBridge.php",
        "description": "Bridges: Type should be defined for param `options` in method `Spryker\\Zed\\OauthCustomerConnector\\Dependency\\Service\\OauthCustomerConnectorToUtilEncodingServiceBridge::encodeJson()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Service/OauthCustomerConnectorToUtilEncodingServiceBridge.php",
        "description": "Bridges: Type should be defined for param `depth` in method `Spryker\\Zed\\OauthCustomerConnector\\Dependency\\Service\\OauthCustomerConnectorToUtilEncodingServiceBridge::encodeJson()`.",
        "rule": "BridgeMethodsRule",
        "ruleset": "Spryker",
        "priority": "2"
    },
    {
        "fileName": "src/Spryker/Zed/OauthCustomerConnector/Dependency/Service/OauthCustomerConnectorToUtilEncodingServiceInterface.php",
        "description": "Bridges: The bridge interface has incorrect method signature for `encodeJson()`. Missed return type. That violates the rule \"All bridge interface methods must have exactly the same or more strict signature as their parent\"",
        "rule": "BridgeMethodsInterfaceRule",
        "ruleset": "Spryker",
        "priority": "2"
    }
]
